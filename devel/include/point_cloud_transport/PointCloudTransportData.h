// Generated by gencpp from file point_cloud_transport/PointCloudTransportData.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_TRANSPORT_MESSAGE_POINTCLOUDTRANSPORTDATA_H
#define POINT_CLOUD_TRANSPORT_MESSAGE_POINTCLOUDTRANSPORTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_transport
{
template <class ContainerAllocator>
struct PointCloudTransportData_
{
  typedef PointCloudTransportData_<ContainerAllocator> Type;

  PointCloudTransportData_()
    : string_a()
    , number_a(0)  {
    }
  PointCloudTransportData_(const ContainerAllocator& _alloc)
    : string_a(_alloc)
    , number_a(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _string_a_type;
  _string_a_type string_a;

   typedef uint32_t _number_a_type;
  _number_a_type number_a;





  typedef boost::shared_ptr< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> const> ConstPtr;

}; // struct PointCloudTransportData_

typedef ::point_cloud_transport::PointCloudTransportData_<std::allocator<void> > PointCloudTransportData;

typedef boost::shared_ptr< ::point_cloud_transport::PointCloudTransportData > PointCloudTransportDataPtr;
typedef boost::shared_ptr< ::point_cloud_transport::PointCloudTransportData const> PointCloudTransportDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace point_cloud_transport

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'point_cloud_transport': ['/home/jakub/Desktop/ROS_workspace_1/src/point_cloud_transport/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1041fd5d40af632dd7d721f20580cc73";
  }

  static const char* value(const ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1041fd5d40af632dULL;
  static const uint64_t static_value2 = 0xd7d721f20580cc73ULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_transport/PointCloudTransportData";
  }

  static const char* value(const ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# TODO: implement message format for transporting compressed point cloud\n"
"\n"
"# placeholder\n"
"\n"
"string string_a\n"
"\n"
"uint32 number_a\n"
"\n"
;
  }

  static const char* value(const ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.string_a);
      stream.next(m.number_a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointCloudTransportData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_transport::PointCloudTransportData_<ContainerAllocator>& v)
  {
    s << indent << "string_a: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.string_a);
    s << indent << "number_a: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_TRANSPORT_MESSAGE_POINTCLOUDTRANSPORTDATA_H
